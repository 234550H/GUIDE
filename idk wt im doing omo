# payment transaction
@app.route('/paymenttransaction', methods=['GET', 'POST'])
def payment_transaction():
    email_key = session.get('email')

    if not email_key or email_key == 'guest':
        session['email'] = 'checkout'
        return redirect(url_for('customer_login'))

    db_customer = shelve.open('Shelves/Customer.db', 'r')
    customer_data = db_customer.get('customer_key', {})
    db_customer.close()

    if email_key not in customer_data:
        return redirect(url_for('customer_signup'))

    customer = customer_data[email_key]

    payment_transaction_form = PaymentTransaction(request.form)
    error = []

    if request.method == 'POST' and payment_transaction_form.validate():
        db_payments = shelve.open('Shelves/Payments.db', 'c')
        order_data = db_payments.get('OrderID', {})

        if email_key == payment_transaction_form.email.data:
            if not payment_transaction_form.name.data.isalpha() or payment_transaction_form.name.data.isspace():
                error.append("Name must only contain letters.")
            if len(payment_transaction_form.mobile_number.data) != 8 or not payment_transaction_form.mobile_number.data.isdigit():
                error.append("Please enter a valid mobile number.")
            if len(payment_transaction_form.zipcode.data) != 6 or not payment_transaction_form.zipcode.data.isdigit():
                error.append("Please enter a valid zipcode.")

            # Validate credit card number format
            card_number = payment_transaction_form.card_number.data
            if not re.match(r'^[4-5][0-9]{15}$', card_number) and not re.match(r'^3[47][0-9]{13}$', card_number):
                error.append("Please enter a valid credit card number.")

            exp_month = payment_transaction_form.expiry_month.data
            if exp_month < datetime.datetime.now().date():
                error.append("Please enter a valid expiry month.")

            if not error:
                # Access the birthdate field using the 'data' attribute
                expmonth = payment_transaction_form.expiry_month.data
                if expmonth is not None:
                    payment_method = None
                    if card_number.startswith('4'):
                        payment_method = 'Visa'
                    elif card_number.startswith('5'):
                        payment_method = 'Mastercard'
                    elif card_number.startswith(('34', '37')):
                        payment_method = 'American Express'

                    order = Customer.CustomerPaymentDetails(
                        payment_transaction_form.name.data,
                        payment_transaction_form.mobile_number.data,
                        payment_transaction_form.email.data,
                        customer.address,  # Assuming customer has address info
                        payment_transaction_form.zipcode.data,
                        card_number,
                        expmonth.strftime('%m-%Y'),
                        payment_method
                    )

                    order_id = str(uuid.uuid4())[:7]  # Generate a random order id
                    order_data[order_id] = order
                    db_payments['OrderID'] = order_data
                    db_payments.close()

                    return render_template(
                        'includes/Transaction/Transaction_successful.html',
                        order_id=order_id,
                        current_url=request.path
                    )
                else:
                    error.append("Please enter a valid expiry month.")
        else:
            error.append("Please use the same email you're logged in as.")

    return render_template(
        'includes/Transaction/paymenttransaction.html',
        form=payment_transaction_form,
        current_url=request.path,
        error=error
    )
